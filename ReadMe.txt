1. Function
  These programs were developed for assemble the genomes with second-generation sequencing data, especially for the Illumina short reads. Genome assembly algorithm is one of the most challenging bioinformatics algorithms, both for the high complexity of the task and the high requirements of computational resources. The typic DBG (de bruijn graph) assembly includes filtering the raw reads, correct the sequencing errors in reads, construct contigs by DBG, and link the contigs into scaffolds by read pair relations, and this package was developed according to this scheme, with each part  developed as a single module. For the performance in assembly length and accuracy, it is comparable to SOAPdenovo, and approach to SOAPdenovo2 in some aspects. In other words, this package can be seen as an alternative implement of SOAPdenovo and SOAPdenovo2, but the structure is more modular and may be easier understood for the new bioinformaticans.


2. Installation
  There is a Makefile in each module clean_illumina correct_error DBG_contig link_scaffold, and you just need to "cd " into the subdirectory for each module and type "make", and all the excutables will be generated.

3. Usage
  In the subdirectory "test/", there is testing data for 40 X simulated Illumina reads for the E.coli genome (4.6 Mb), associated with all the running commands stored in the file "work.sh" in each subdirectories. 
  The major used excutables are:
  clean_lowqual   exclude the low quality bases in raw reads
  clean_adapter   exclude the adaptor contaminants in raw reads
  kmerfreq        generate the k-mer frequency table for error correction by correct_error_reads
  correct_error_reads   correct the base errors in raw reads based on the k-mer frequency generated by kmerfreq
  debruijn_contig   assembly the error corrected reads into contig sequences by the DBG (de bruijn graph) method
  map_pair        map pair-end reads onto the contig sequences, and get pairs with each end map to a different contig
  link_scaffold   link the contigs into scaffolds with pair relations generated by map_pair



3. Reference (During the development of this package, we published two papers on the genome assembly algorithm)
  Zhenyu Li, Yanxiang chen, Desheng Mu, et al. Bicheng Yang? and Wei Fan?. Comparison of the two major classes of assembly algorithms: overlap-layout-consensus and de-bruijn-graph. Briefings in Functional Genomics. VOL 11. NO 1. 25-37 (2012)
  Wei Fan* & Ruiqiang Li. Test driving genome assemblers. Nature biotechnology, volume 30 number 4 (2012).
